// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/fitan/mykit/mytemplate/services"
	"github.com/fitan/mykit/mytemplate/services/hello"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitApp() (App, error) {
	router := initMux()
	conf, err := initConf()
	if err != nil {
		return App{}, err
	}
	atomicLevel := initAtomicLevel(conf)
	sugaredLogger := initLog(conf, atomicLevel)
	myrouterRouter := initRouter(router, sugaredLogger, atomicLevel)
	db, err := initGORM(conf, sugaredLogger)
	if err != nil {
		return App{}, err
	}
	mygormDB := initMyGORM(db, sugaredLogger)
	client, err := initConsul(conf, sugaredLogger)
	if err != nil {
		return App{}, err
	}
	sd, err := initSD(conf, client, sugaredLogger)
	if err != nil {
		return App{}, err
	}
	service := hello.NewService(sugaredLogger)
	v := initEndpointMiddleware()
	mws := hello.NewMws(v)
	v2 := initHttpServiceOptions(sugaredLogger)
	ops := hello.NewOps(v2)
	handler := hello.MakeHTTPHandler(router, service, mws, ops)
	handlers := services.Handlers{
		Hello: handler,
	}
	app := App{
		Router:   myrouterRouter,
		Gorm:     mygormDB,
		Log:      sugaredLogger,
		Cfg:      conf,
		SD:       sd,
		Handlers: handlers,
	}
	return app, nil
}

// wire.go:

var confSet = wire.NewSet(initConf)

var gormSet = wire.NewSet(initGORM)

var logSet = wire.NewSet(initLog)

var routerSet = wire.NewSet(initRouter)

var atomicLevelSet = wire.NewSet(initAtomicLevel)

var consulSet = wire.NewSet(initConsul)

var sdSet = wire.NewSet(initSD)

var myGORMSet = wire.NewSet(initMyGORM)

var mwsSet = wire.NewSet(initEndpointMiddleware)

var optsSet = wire.NewSet(initHttpServiceOptions)

var muxSet = wire.NewSet(initMux)

var initSet = wire.NewSet(
	consulSet,
	confSet,
	gormSet,
	logSet,
	routerSet,
	atomicLevelSet,
	sdSet,
	myGORMSet,
	mwsSet,
	optsSet,
	muxSet, services.Iset,
)
